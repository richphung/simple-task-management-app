{
  "info": {
    "name": "Task Management API - Automated Tests",
    "description": "Comprehensive task management system with automated test scripts for all endpoints.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080/api",
      "type": "string"
    },
    {
      "key": "createdTaskId",
      "value": "",
      "type": "string"
    },
    {
      "key": "testTaskId1",
      "value": "",
      "type": "string"
    },
    {
      "key": "testTaskId2",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üöÄ Setup & Health Check",
      "item": [
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Health check status is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "pm.test(\"Health check response is valid\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.be.oneOf(['UP', 'DOWN']);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "http://localhost:8080/actuator/health",
              "protocol": "http",
              "host": ["localhost"],
              "port": "8080",
              "path": ["actuator", "health"]
            }
          }
        }
      ]
    },
    {
      "name": "üìù Core Task Management",
      "item": [
        {
          "name": "Create Task",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 2000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test(\"Response has required fields\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('title');",
                  "    pm.expect(jsonData.data).to.have.property('description');",
                  "    pm.expect(jsonData.data).to.have.property('priority');",
                  "    pm.expect(jsonData.data).to.have.property('status');",
                  "    pm.expect(jsonData.data).to.have.property('createdAt');",
                  "    pm.expect(jsonData.data).to.have.property('updatedAt');",
                  "});",
                  "",
                  "pm.test(\"Task data is correct\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.title).to.eql(\"Complete project documentation\");",
                  "    pm.expect(jsonData.data.description).to.eql(\"Write comprehensive API documentation\");",
                  "    pm.expect(jsonData.data.priority).to.eql(\"HIGH\");",
                  "    pm.expect(jsonData.data.status).to.eql(\"TODO\");",
                  "});",
                  "",
                  "pm.test(\"Task business logic validation\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    // Validate task ID is positive integer",
                  "    pm.expect(jsonData.data.id).to.be.a('number');",
                  "    pm.expect(jsonData.data.id).to.be.above(0);",
                  "    // Validate timestamps are present and valid",
                  "    pm.expect(jsonData.data.createdAt).to.not.be.null;",
                  "    pm.expect(jsonData.data.updatedAt).to.not.be.null;",
                  "    pm.expect(new Date(jsonData.data.createdAt)).to.be.a('date');",
                  "    pm.expect(new Date(jsonData.data.updatedAt)).to.be.a('date');",
                  "    // Validate timestamps are recent (within last 10 minutes)",
                  "    const now = new Date();",
                  "    const createdAt = new Date(jsonData.data.createdAt);",
                  "    const updatedAt = new Date(jsonData.data.updatedAt);",
                  "    pm.expect(now - createdAt).to.be.below(600000); // 10 minutes",
                  "    pm.expect(now - updatedAt).to.be.below(600000);",
                  "    // Validate task is not overdue initially",
                  "    pm.expect(jsonData.data.overdue).to.be.false;",
                  "    // Validate completedAt is null for new task",
                  "    pm.expect(jsonData.data.completedAt).to.be.null;",
                  "    // Validate timestamps are equal for new task (within 1 second tolerance)",
                  "    const timeDiff = Math.abs(createdAt.getTime() - updatedAt.getTime());",
                  "    pm.expect(timeDiff).to.be.below(1000); // 1 second tolerance",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.collectionVariables.set('createdTaskId', jsonData.data.id);",
                  "    console.log('Created task ID:', jsonData.data.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Complete project documentation\",\n  \"description\": \"Write comprehensive API documentation\",\n  \"priority\": \"HIGH\",\n  \"status\": \"TODO\",\n  \"dueDate\": \"2025-12-31\",\n  \"notes\": \"Priority task for client delivery\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tasks",
              "host": ["{{baseUrl}}"],
              "path": ["tasks"]
            }
          }
        },
        {
          "name": "Create Second Task",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 2000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test(\"Response has required fields\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('title');",
                  "    pm.expect(jsonData.data).to.have.property('description');",
                  "    pm.expect(jsonData.data).to.have.property('priority');",
                  "    pm.expect(jsonData.data).to.have.property('status');",
                  "    pm.expect(jsonData.data).to.have.property('createdAt');",
                  "    pm.expect(jsonData.data).to.have.property('updatedAt');",
                  "});",
                  "",
                  "pm.test(\"Task data is correct\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.title).to.eql(\"Review code changes\");",
                  "    pm.expect(jsonData.data.description).to.eql(\"Review pull requests for quality\");",
                  "    pm.expect(jsonData.data.priority).to.eql(\"MEDIUM\");",
                  "    pm.expect(jsonData.data.status).to.eql(\"TODO\");",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.collectionVariables.set('testTaskId1', jsonData.data.id);",
                  "    console.log('Created second task ID:', jsonData.data.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Review code changes\",\n  \"description\": \"Review pull requests for quality\",\n  \"priority\": \"MEDIUM\",\n  \"status\": \"TODO\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tasks",
              "host": ["{{baseUrl}}"],
              "path": ["tasks"]
            }
          }
        },
        {
          "name": "Get All Tasks",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has pagination structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('content');",
                  "    pm.expect(jsonData.data).to.have.property('pageable');",
                  "    pm.expect(jsonData.data).to.have.property('totalElements');",
                  "    pm.expect(jsonData.data).to.have.property('totalPages');",
                  "});",
                  "",
                  "pm.test(\"Content is an array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.content).to.be.an('array');",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.data && jsonData.data.content && jsonData.data.content.length > 0) {",
                  "        pm.collectionVariables.set('testTaskId1', jsonData.data.content[0].id);",
                  "        if (jsonData.data.content.length > 1) {",
                  "            pm.collectionVariables.set('testTaskId2', jsonData.data.content[1].id);",
                  "        }",
                  "        console.log('Found', jsonData.data.content.length, 'tasks');",
                  "    }",
                  "}",
                  "",
                  "pm.test(\"Pagination business logic validation\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    // Validate pagination structure",
                  "    pm.expect(jsonData.data).to.have.property('content');",
                  "    pm.expect(jsonData.data).to.have.property('pageable');",
                  "    pm.expect(jsonData.data).to.have.property('totalElements');",
                  "    pm.expect(jsonData.data).to.have.property('totalPages');",
                  "    pm.expect(jsonData.data).to.have.property('size');",
                  "    pm.expect(jsonData.data).to.have.property('number');",
                  "    pm.expect(jsonData.data).to.have.property('first');",
                  "    pm.expect(jsonData.data).to.have.property('last');",
                  "    pm.expect(jsonData.data).to.have.property('numberOfElements');",
                  "    // Validate pagination values are non-negative",
                  "    pm.expect(jsonData.data.totalElements).to.be.at.least(0);",
                  "    pm.expect(jsonData.data.totalPages).to.be.at.least(0);",
                  "    pm.expect(jsonData.data.size).to.be.at.least(0);",
                  "    pm.expect(jsonData.data.number).to.be.at.least(0);",
                  "    pm.expect(jsonData.data.numberOfElements).to.be.at.least(0);",
                  "    // Validate content array size matches numberOfElements",
                  "    pm.expect(jsonData.data.content.length).to.eql(jsonData.data.numberOfElements);",
                  "    // Validate totalPages calculation",
                  "    const expectedTotalPages = Math.ceil(jsonData.data.totalElements / jsonData.data.size);",
                  "    pm.expect(jsonData.data.totalPages).to.eql(expectedTotalPages);",
                  "    // Validate first/last page flags",
                  "    pm.expect(jsonData.data.first).to.be.a('boolean');",
                  "    pm.expect(jsonData.data.last).to.be.a('boolean');",
                  "    // Validate page number is within bounds",
                  "    pm.expect(jsonData.data.number).to.be.at.least(0);",
                  "    pm.expect(jsonData.data.number).to.be.below(jsonData.data.totalPages);",
                  "    // Validate content items have required fields",
                  "    if (jsonData.data.content.length > 0) {",
                  "        const task = jsonData.data.content[0];",
                  "        pm.expect(task).to.have.property('id');",
                  "        pm.expect(task).to.have.property('title');",
                  "        pm.expect(task).to.have.property('status');",
                  "        pm.expect(task).to.have.property('priority');",
                  "        pm.expect(task).to.have.property('createdAt');",
                  "        pm.expect(task).to.have.property('updatedAt');",
                  "        pm.expect(task).to.have.property('overdue');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/tasks?page=0&size=10&sort=createdAt,desc",
              "host": ["{{baseUrl}}"],
              "path": ["tasks"],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                },
                {
                  "key": "sort",
                  "value": "createdAt,desc"
                }
              ]
            }
          }
        },
        {
          "name": "Get Task by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has task data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('title');",
                  "    pm.expect(jsonData.data).to.have.property('description');",
                  "});",
                  "",
                  "pm.test(\"Task ID matches requested ID\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const requestedId = pm.collectionVariables.get('createdTaskId');",
                  "    pm.expect(jsonData.data.id).to.eql(parseInt(requestedId));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/tasks/{{createdTaskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["tasks", "{{createdTaskId}}"]
            }
          }
        },
        {
          "name": "Update Task",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Updated task data is correct\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data.title).to.eql(\"Complete project documentation\");",
                  "    pm.expect(jsonData.data.status).to.eql(\"IN_PROGRESS\");",
                  "    pm.expect(jsonData.data.notes).to.eql(\"In progress - 50% complete\");",
                  "});",
                  "",
                  "pm.test(\"Updated timestamp is present\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('updatedAt');",
                  "    pm.expect(jsonData.data.updatedAt).to.not.be.null;",
                  "});",
                  "",
                  "pm.test(\"Update business logic validation\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    // Validate task ID remains the same",
                  "    pm.expect(jsonData.data.id).to.eql(parseInt(pm.collectionVariables.get('createdTaskId')));",
                  "    // Validate status change business logic",
                  "    pm.expect(jsonData.data.status).to.eql(\"IN_PROGRESS\");",
                  "    // Validate timestamps are valid dates",
                  "    const createdAt = new Date(jsonData.data.createdAt);",
                  "    const updatedAt = new Date(jsonData.data.updatedAt);",
                  "    pm.expect(createdAt).to.be.a('date');",
                  "    pm.expect(updatedAt).to.be.a('date');",
                  "    // Validate notes field was updated",
                  "    pm.expect(jsonData.data.notes).to.eql(\"In progress - 50% complete\");",
                  "    // Validate task is still not overdue (no due date set)",
                  "    pm.expect(jsonData.data.overdue).to.be.false;",
                  "    // Validate completedAt is still null (not completed yet)",
                  "    pm.expect(jsonData.data.completedAt).to.be.null;",
                  "    // Validate timestamps are recent (within last 10 minutes)",
                  "    const now = new Date();",
                  "    pm.expect(now - createdAt).to.be.below(600000); // 10 minutes",
                  "    pm.expect(now - updatedAt).to.be.below(600000);",
                  "    // Validate timestamps are valid (not null/undefined)",
                  "    pm.expect(jsonData.data.createdAt).to.not.be.null;",
                  "    pm.expect(jsonData.data.updatedAt).to.not.be.null;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Complete project documentation\",\n  \"description\": \"Write comprehensive API documentation\",\n  \"priority\": \"HIGH\",\n  \"status\": \"IN_PROGRESS\",\n  \"dueDate\": \"2025-12-31\",\n  \"notes\": \"In progress - 50% complete\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tasks/{{createdTaskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["tasks", "{{createdTaskId}}"]
            }
          }
        },
        {
          "name": "Complete Task",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Task status is COMPLETED\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data.status).to.eql(\"COMPLETED\");",
                  "});",
                  "",
                  "pm.test(\"Completed timestamp is present\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('completedAt');",
                  "    pm.expect(jsonData.data.completedAt).to.not.be.null;",
                  "});",
                  "",
                  "pm.test(\"Complete task business logic validation\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    // Validate task ID remains the same",
                  "    pm.expect(jsonData.data.id).to.eql(parseInt(pm.collectionVariables.get('createdTaskId')));",
                  "    // Validate status is COMPLETED",
                  "    pm.expect(jsonData.data.status).to.eql(\"COMPLETED\");",
                  "    // Validate completedAt timestamp is valid and recent",
                  "    const completedAt = new Date(jsonData.data.completedAt);",
                  "    pm.expect(completedAt).to.be.a('date');",
                  "    const now = new Date();",
                  "    pm.expect(now - completedAt).to.be.below(300000); // Within 5 minutes",
                  "    // Validate completedAt is after createdAt",
                  "    const createdAt = new Date(jsonData.data.createdAt);",
                  "    pm.expect(completedAt.getTime()).to.be.above(createdAt.getTime());",
                  "    // Validate updatedAt was also updated",
                  "    const updatedAt = new Date(jsonData.data.updatedAt);",
                  "    pm.expect(updatedAt.getTime()).to.be.above(createdAt.getTime());",
                  "    // Validate task is not overdue (completed tasks can't be overdue)",
                  "    pm.expect(jsonData.data.overdue).to.be.false;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "url": {
              "raw": "{{baseUrl}}/tasks/{{createdTaskId}}/complete",
              "host": ["{{baseUrl}}"],
              "path": ["tasks", "{{createdTaskId}}", "complete"]
            }
          }
        },
        {
          "name": "Duplicate Task",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Duplicated task has new ID\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data.id).to.not.eql(parseInt(pm.collectionVariables.get('createdTaskId')));",
                  "});",
                  "",
                  "pm.test(\"Duplicated task has copy in title\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.title).to.include('Copy');",
                  "});",
                  "",
                  "pm.test(\"Duplicate task business logic validation\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    // Validate new task has different ID",
                  "    const originalId = parseInt(pm.collectionVariables.get('createdTaskId'));",
                  "    pm.expect(jsonData.data.id).to.not.eql(originalId);",
                  "    pm.expect(jsonData.data.id).to.be.above(originalId);",
                  "    // Validate title contains 'Copy' suffix",
                  "    pm.expect(jsonData.data.title).to.include('Copy');",
                  "    // Validate status is reset to TODO",
                  "    pm.expect(jsonData.data.status).to.eql('TODO');",
                  "    // Validate completedAt is null (new task)",
                  "    pm.expect(jsonData.data.completedAt).to.be.null;",
                  "    // Validate timestamps are recent",
                  "    const now = new Date();",
                  "    const createdAt = new Date(jsonData.data.createdAt);",
                  "    const updatedAt = new Date(jsonData.data.updatedAt);",
                  "    pm.expect(now - createdAt).to.be.below(600000); // 10 minutes",
                  "    pm.expect(now - updatedAt).to.be.below(600000);",
                  "    // Validate timestamps are equal (new task) (within 1 second tolerance)",
                  "    const timeDiff = Math.abs(createdAt.getTime() - updatedAt.getTime());",
                  "    pm.expect(timeDiff).to.be.below(1000); // 1 second tolerance",
                  "    // Validate task is not overdue",
                  "    pm.expect(jsonData.data.overdue).to.be.false;",
                  "    // Validate priority is preserved",
                  "    pm.expect(jsonData.data.priority).to.eql('HIGH');",
                  "    // Validate description is preserved",
                  "    pm.expect(jsonData.data.description).to.eql('Write comprehensive API documentation');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "url": {
              "raw": "{{baseUrl}}/tasks/{{createdTaskId}}/duplicate",
              "host": ["{{baseUrl}}"],
              "path": ["tasks", "{{createdTaskId}}", "duplicate"]
            }
          }
        },
        {
          "name": "Delete Task",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 204\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});",
                  "",
                  "pm.test(\"Response time is reasonable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "url": {
              "raw": "{{baseUrl}}/tasks/{{createdTaskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["tasks", "{{createdTaskId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "üîç Search & Filtering",
      "item": [
        {
          "name": "Search Tasks",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Search response has pagination\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('content');",
                  "    pm.expect(jsonData.data).to.have.property('totalElements');",
                  "});",
                  "",
                  "pm.test(\"Search results are relevant\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.data.content && jsonData.data.content.length > 0) {",
                  "        const firstTask = jsonData.data.content[0];",
                  "        const searchTerm = 'documentation';",
                  "        const titleMatch = firstTask.title.toLowerCase().includes(searchTerm.toLowerCase());",
                  "        const descMatch = firstTask.description.toLowerCase().includes(searchTerm.toLowerCase());",
                  "        pm.expect(titleMatch || descMatch).to.be.true;",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"searchTerm\": \"documentation\",\n  \"status\": \"TODO\",\n  \"priority\": \"HIGH\",\n  \"page\": 0,\n  \"size\": 10,\n  \"sortBy\": \"dueDate\",\n  \"sortDirection\": \"ASC\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tasks/search",
              "host": ["{{baseUrl}}"],
              "path": ["tasks", "search"]
            }
          }
        },
        {
          "name": "Quick Search",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Quick search returns array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('content');",
                  "    pm.expect(jsonData.data.content).to.be.an('array');",
                  "    // Note: Empty results are acceptable for new database",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/tasks/search/quick?q=documentation&status=TODO",
              "host": ["{{baseUrl}}"],
              "path": ["tasks", "search", "quick"],
              "query": [
                {
                  "key": "q",
                  "value": "documentation"
                },
                {
                  "key": "status",
                  "value": "TODO"
                }
              ]
            }
          }
        },
        {
          "name": "Get Tasks by Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"All tasks have correct status\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    if (jsonData.data.content && jsonData.data.content.length > 0) {",
                  "        jsonData.data.content.forEach(task => {",
                  "            pm.expect(task.status).to.eql('TODO');",
                  "        });",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/tasks/status/TODO?page=0&size=10",
              "host": ["{{baseUrl}}"],
              "path": ["tasks", "status", "TODO"],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ]
            }
          }
        },
        {
          "name": "Get Overdue Tasks",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has pagination structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('content');",
                  "    pm.expect(jsonData.data.content).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/tasks/overdue",
              "host": ["{{baseUrl}}"],
              "path": ["tasks", "overdue"]
            }
          }
        }
      ]
    },
    {
      "name": "üìä Analytics & Reporting",
      "item": [
        {
          "name": "Get Task Analytics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Analytics response has required fields\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('totalTasks');",
                  "    pm.expect(jsonData.data).to.have.property('completedTasks');",
                  "    pm.expect(jsonData.data).to.have.property('statusCounts');",
                  "    pm.expect(jsonData.data).to.have.property('priorityCounts');",
                  "});",
                  "",
                  "pm.test(\"Analytics values are numbers\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.totalTasks).to.be.a('number');",
                  "    pm.expect(jsonData.data.completedTasks).to.be.a('number');",
                  "    pm.expect(jsonData.data.statusCounts).to.be.an('object');",
                  "    pm.expect(jsonData.data.priorityCounts).to.be.an('object');",
                  "});",
                  "",
                  "pm.test(\"Analytics business logic validation\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    // Validate total tasks is non-negative",
                  "    pm.expect(jsonData.data.totalTasks).to.be.at.least(0);",
                  "    // Validate completed tasks is non-negative and not greater than total",
                  "    pm.expect(jsonData.data.completedTasks).to.be.at.least(0);",
                  "    pm.expect(jsonData.data.completedTasks).to.be.at.most(jsonData.data.totalTasks);",
                  "    // Validate status counts contain expected statuses",
                  "    pm.expect(jsonData.data.statusCounts).to.have.property('TODO');",
                  "    pm.expect(jsonData.data.statusCounts).to.have.property('IN_PROGRESS');",
                  "    pm.expect(jsonData.data.statusCounts).to.have.property('COMPLETED');",
                  "    // Validate status counts are non-negative",
                  "    pm.expect(jsonData.data.statusCounts.TODO).to.be.at.least(0);",
                  "    pm.expect(jsonData.data.statusCounts.IN_PROGRESS).to.be.at.least(0);",
                  "    pm.expect(jsonData.data.statusCounts.COMPLETED).to.be.at.least(0);",
                  "    // Validate priority counts contain expected priorities",
                  "    pm.expect(jsonData.data.priorityCounts).to.have.property('HIGH');",
                  "    pm.expect(jsonData.data.priorityCounts).to.have.property('MEDIUM');",
                  "    pm.expect(jsonData.data.priorityCounts).to.have.property('LOW');",
                  "    // Validate priority counts are non-negative",
                  "    pm.expect(jsonData.data.priorityCounts.HIGH).to.be.at.least(0);",
                  "    pm.expect(jsonData.data.priorityCounts.MEDIUM).to.be.at.least(0);",
                  "    pm.expect(jsonData.data.priorityCounts.LOW).to.be.at.least(0);",
                  "    // Validate sum of status counts equals total tasks",
                  "    const statusSum = jsonData.data.statusCounts.TODO + jsonData.data.statusCounts.IN_PROGRESS + jsonData.data.statusCounts.COMPLETED;",
                  "    pm.expect(statusSum).to.eql(jsonData.data.totalTasks);",
                  "    // Validate sum of priority counts equals total tasks",
                  "    const prioritySum = jsonData.data.priorityCounts.HIGH + jsonData.data.priorityCounts.MEDIUM + jsonData.data.priorityCounts.LOW;",
                  "    pm.expect(prioritySum).to.eql(jsonData.data.totalTasks);",
                  "    // Validate completion rate calculation",
                  "    if (jsonData.data.totalTasks > 0) {",
                  "        const expectedCompletionRate = (jsonData.data.completedTasks / jsonData.data.totalTasks) * 100;",
                  "        pm.expect(jsonData.data.completionRate).to.be.closeTo(expectedCompletionRate, 0.01);",
                  "    } else {",
                  "        pm.expect(jsonData.data.completionRate).to.eql(0);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/analytics/dashboard",
              "host": ["{{baseUrl}}"],
              "path": ["analytics", "dashboard"]
            }
          }
        },
        {
          "name": "Export Tasks (CSV)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Content-Type is CSV\", function () {",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/csv\");",
                  "});",
                  "",
                  "pm.test(\"Response has content\", function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/export/tasks?format=csv",
              "host": ["{{baseUrl}}"],
              "path": ["export", "tasks"],
              "query": [
                {
                  "key": "format",
                  "value": "csv"
                }
              ]
            }
          }
        },
        {
          "name": "Export Tasks (JSON)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Content-Type is JSON\", function () {",
                  "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
                  "});",
                  "",
                  "pm.test(\"Response is valid JSON array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/export/tasks?format=json",
              "host": ["{{baseUrl}}"],
              "path": ["export", "tasks"],
              "query": [
                {
                  "key": "format",
                  "value": "json"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "‚ö° Bulk Operations",
      "item": [
        {
          "name": "Bulk Create Tasks",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"All created tasks have IDs\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    jsonData.data.forEach(task => {",
                  "        pm.expect(task).to.have.property('id');",
                  "        pm.expect(task.id).to.not.be.null;",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n  {\n    \"title\": \"Bulk Task 1\",\n    \"description\": \"Description 1\",\n    \"priority\": \"HIGH\",\n    \"status\": \"TODO\"\n  },\n  {\n    \"title\": \"Bulk Task 2\",\n    \"description\": \"Description 2\",\n    \"priority\": \"MEDIUM\",\n    \"status\": \"TODO\"\n  }\n]"
            },
            "url": {
              "raw": "{{baseUrl}}/tasks/bulk/create",
              "host": ["{{baseUrl}}"],
              "path": ["tasks", "bulk", "create"]
            }
          }
        },
        {
          "name": "Bulk Update Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response indicates success\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.include('Updated status for');",
                  "});",
                  "",
                  "pm.test(\"Bulk update business logic validation\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const responseText = jsonData.data;",
                  "    // Validate response contains expected count",
                  "    pm.expect(responseText).to.include('tasks');",
                  "    pm.expect(responseText).to.include('In Progress');",
                  "    // Validate response format",
                  "    pm.expect(responseText).to.match(/Updated status for \\d+ tasks to .+/);",
                  "    // Validate response time is reasonable for bulk operation",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "    // Validate response is not empty",
                  "    pm.expect(responseText).to.not.be.empty;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"taskIds\": [{{createdTaskId}}, {{testTaskId1}}],\n  \"status\": \"IN_PROGRESS\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tasks/bulk/status",
              "host": ["{{baseUrl}}"],
              "path": ["tasks", "bulk", "status"]
            }
          }
        },
        {
          "name": "Bulk Complete Tasks",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response indicates success\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[{{createdTaskId}}, {{testTaskId1}}]"
            },
            "url": {
              "raw": "{{baseUrl}}/tasks/bulk/complete",
              "host": ["{{baseUrl}}"],
              "path": ["tasks", "bulk", "complete"]
            }
          }
        }
      ]
    },
    {
      "name": "üîç Smart Suggestions",
      "item": [
        {
          "name": "Get Task Suggestions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 204\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response is an array\", function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('success');",
                  "        pm.expect(jsonData).to.have.property('data');",
                  "        pm.expect(jsonData.success).to.be.true;",
                  "        pm.expect(jsonData.data).to.be.an('array');",
                  "    });",
                  "    ",
                  "    pm.test(\"Suggestions business logic validation\", function () {",
                  "        const jsonData = pm.response.json();",
                  "        if (jsonData.data.length > 0) {",
                  "            const suggestion = jsonData.data[0];",
                  "            // Validate suggestion has required fields",
                  "            pm.expect(suggestion).to.have.property('suggestedTitle');",
                  "            pm.expect(suggestion).to.have.property('suggestedDescription');",
                  "            pm.expect(suggestion).to.have.property('suggestedPriority');",
                  "            pm.expect(suggestion).to.have.property('suggestedStatus');",
                  "            pm.expect(suggestion).to.have.property('confidenceScore');",
                  "            // Validate confidence score is between 0 and 1",
                  "            pm.expect(suggestion.confidenceScore).to.be.at.least(0);",
                  "            pm.expect(suggestion.confidenceScore).to.be.at.most(1);",
                  "            // Validate priority is valid enum value",
                  "            pm.expect(['HIGH', 'MEDIUM', 'LOW']).to.include(suggestion.suggestedPriority);",
                  "            // Validate status is valid enum value",
                  "            pm.expect(['TODO', 'IN_PROGRESS', 'COMPLETED']).to.include(suggestion.suggestedStatus);",
                  "            // Validate title is not empty",
                  "            pm.expect(suggestion.suggestedTitle).to.not.be.empty;",
                  "            // Validate description is not empty",
                  "            pm.expect(suggestion.suggestedDescription).to.not.be.empty;",
                  "        }",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/suggestions/task?title=code review",
              "host": ["{{baseUrl}}"],
              "path": ["suggestions", "task"],
              "query": [
                {
                  "key": "title",
                  "value": "code review"
                }
              ]
            }
          }
        },
        {
          "name": "Get Default Suggestions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Default suggestions have required fields\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.data.length > 0) {",
                  "        const suggestion = jsonData.data[0];",
                  "        pm.expect(suggestion).to.have.property('suggestedTitle');",
                  "        pm.expect(suggestion).to.have.property('suggestedDescription');",
                  "        pm.expect(suggestion).to.have.property('suggestedPriority');",
                  "        pm.expect(suggestion).to.have.property('suggestedStatus');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/suggestions/default",
              "host": ["{{baseUrl}}"],
              "path": ["suggestions", "default"]
            }
          }
        }
      ]
    },
    {
      "name": "üîí Audit & History",
      "item": [
        {
          "name": "Get Task Audit History",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has pagination structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('content');",
                  "    pm.expect(jsonData.data.content).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Audit records have required fields\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.data.content && jsonData.data.content.length > 0) {",
                  "        const audit = jsonData.data.content[0];",
                  "        pm.expect(audit).to.have.property('id');",
                  "        pm.expect(audit).to.have.property('taskId');",
                  "        pm.expect(audit).to.have.property('action');",
                  "        pm.expect(audit).to.have.property('changeTimestamp');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/audit/task/{{createdTaskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["audit", "task", "{{createdTaskId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "üß† Advanced Business Logic Tests",
      "item": [
        {
          "name": "Task Lifecycle Workflow",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Complete task lifecycle workflow\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    // Validate task was created successfully",
                  "    pm.expect(jsonData.data.id).to.be.a('number');",
                  "    pm.expect(jsonData.data.status).to.eql('TODO');",
                  "    pm.expect(jsonData.data.completedAt).to.be.null;",
                  "    ",
                  "    // Store task ID for subsequent tests",
                  "    pm.collectionVariables.set('lifecycleTaskId', jsonData.data.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Lifecycle Test Task\",\n  \"description\": \"Testing complete task lifecycle\",\n  \"priority\": \"HIGH\",\n  \"status\": \"TODO\",\n  \"dueDate\": \"2025-12-31\",\n  \"notes\": \"Initial creation\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tasks",
              "host": ["{{baseUrl}}"],
              "path": ["tasks"]
            }
          }
        },
        {
          "name": "Start Task (TODO -> IN_PROGRESS)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Task status transition: TODO -> IN_PROGRESS\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data.status).to.eql('IN_PROGRESS');",
                  "    pm.expect(jsonData.data.completedAt).to.be.null;",
                  "    // Validate updatedAt was updated",
                  "    pm.expect(jsonData.data.updatedAt).to.not.be.null;",
                  "});",
                  "",
                  "pm.test(\"Task remains not overdue after status change\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.overdue).to.be.false;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Lifecycle Test Task\",\n  \"description\": \"Testing complete task lifecycle\",\n  \"priority\": \"HIGH\",\n  \"status\": \"IN_PROGRESS\",\n  \"dueDate\": \"2025-12-31\",\n  \"notes\": \"Started working on task\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tasks/{{lifecycleTaskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["tasks", "{{lifecycleTaskId}}"]
            }
          }
        },
        {
          "name": "Complete Task (IN_PROGRESS -> COMPLETED)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Task status transition: IN_PROGRESS -> COMPLETED\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data.status).to.eql('COMPLETED');",
                  "    pm.expect(jsonData.data.completedAt).to.not.be.null;",
                  "    ",
                  "    // Validate completedAt is a valid date",
                  "    const completedAt = new Date(jsonData.data.completedAt);",
                  "    pm.expect(completedAt).to.be.a('date');",
                  "    ",
                  "    // Validate completedAt is recent (within 5 minutes)",
                  "    const now = new Date();",
                  "    pm.expect(now - completedAt).to.be.below(300000);",
                  "});",
                  "",
                  "pm.test(\"Completed task is never overdue\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.overdue).to.be.false;",
                  "});",
                  "",
                  "pm.test(\"Completion timestamp is after creation\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const createdAt = new Date(jsonData.data.createdAt);",
                  "    const completedAt = new Date(jsonData.data.completedAt);",
                  "    pm.expect(completedAt.getTime()).to.be.above(createdAt.getTime());",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "url": {
              "raw": "{{baseUrl}}/tasks/{{lifecycleTaskId}}/complete",
              "host": ["{{baseUrl}}"],
              "path": ["tasks", "{{lifecycleTaskId}}", "complete"]
            }
          }
        },
        {
          "name": "Overdue Task Logic Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Task with past due date is overdue\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data.overdue).to.be.true;",
                  "    pm.expect(jsonData.data.dueDate).to.not.be.null;",
                  "    ",
                  "    // Validate due date is in the past",
                  "    const dueDate = new Date(jsonData.data.dueDate);",
                  "    const now = new Date();",
                  "    pm.expect(dueDate.getTime()).to.be.below(now.getTime());",
                  "});",
                  "",
                  "pm.test(\"Overdue task can still be completed\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.status).to.eql('TODO');",
                  "    pm.expect(jsonData.data.completedAt).to.be.null;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Overdue Test Task\",\n  \"description\": \"Testing overdue logic\",\n  \"priority\": \"HIGH\",\n  \"status\": \"TODO\",\n  \"dueDate\": \"2020-01-01\",\n  \"notes\": \"This task is overdue\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tasks",
              "host": ["{{baseUrl}}"],
              "path": ["tasks"]
            }
          }
        },
        {
          "name": "Create Overdue Task for Completion Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Overdue task created successfully\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data.status).to.eql('TODO');",
                  "    pm.expect(jsonData.data.overdue).to.be.true;",
                  "    pm.collectionVariables.set('overdueTaskId', jsonData.data.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Overdue Task for Completion Test\",\n  \"description\": \"This task is overdue and will be completed\",\n  \"priority\": \"HIGH\",\n  \"status\": \"TODO\",\n  \"dueDate\": \"2024-01-01\",\n  \"notes\": \"Testing overdue task completion\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tasks",
              "host": ["{{baseUrl}}"],
              "path": ["tasks"]
            }
          }
        },
        {
          "name": "Complete Overdue Task",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Completed overdue task is no longer overdue\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data.status).to.eql('COMPLETED');",
                  "    pm.expect(jsonData.data.overdue).to.be.false;",
                  "    pm.expect(jsonData.data.completedAt).to.not.be.null;",
                  "});",
                  "",
                  "pm.test(\"Business rule: Completed tasks are never overdue\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    // Even if due date is in the past, completed tasks are not overdue",
                  "    pm.expect(jsonData.data.overdue).to.be.false;",
                  "    pm.expect(jsonData.data.status).to.eql('COMPLETED');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "url": {
              "raw": "{{baseUrl}}/tasks/{{overdueTaskId}}/complete",
              "host": ["{{baseUrl}}"],
              "path": ["tasks", "{{overdueTaskId}}", "complete"]
            }
          }
        },
        {
          "name": "Bulk Operations Business Logic",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Bulk create maintains data integrity\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "    pm.expect(jsonData.data.length).to.eql(3);",
                  "    ",
                  "    // Validate each task has unique ID",
                  "    const ids = jsonData.data.map(task => task.id);",
                  "    const uniqueIds = [...new Set(ids)];",
                  "    pm.expect(uniqueIds.length).to.eql(ids.length);",
                  "    ",
                  "    // Validate all tasks have correct initial status",
                  "    jsonData.data.forEach(task => {",
                  "        pm.expect(task.status).to.eql('TODO');",
                  "        pm.expect(task.completedAt).to.be.null;",
                  "        pm.expect(task.overdue).to.be.false;",
                  "    });",
                  "});",
                  "",
                  "// Store task IDs for bulk operations",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    const taskIds = jsonData.data.map(task => task.id);",
                  "    pm.collectionVariables.set('bulkTaskIds', JSON.stringify(taskIds));",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n  {\n    \"title\": \"Bulk Task 1\",\n    \"description\": \"First bulk task\",\n    \"priority\": \"HIGH\",\n    \"status\": \"TODO\",\n    \"dueDate\": \"2025-12-31\"\n  },\n  {\n    \"title\": \"Bulk Task 2\",\n    \"description\": \"Second bulk task\",\n    \"priority\": \"MEDIUM\",\n    \"status\": \"TODO\",\n    \"dueDate\": \"2025-12-31\"\n  },\n  {\n    \"title\": \"Bulk Task 3\",\n    \"description\": \"Third bulk task\",\n    \"priority\": \"LOW\",\n    \"status\": \"TODO\",\n    \"dueDate\": \"2025-12-31\"\n  }\n]"
            },
            "url": {
              "raw": "{{baseUrl}}/tasks/bulk/create",
              "host": ["{{baseUrl}}"],
              "path": ["tasks", "bulk", "create"]
            }
          }
        },
        {
          "name": "Bulk Status Update Logic",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Bulk status update affects correct tasks\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.include('Updated status for');",
                  "    pm.expect(jsonData.data).to.include('In Progress');",
                  "    ",
                  "    // Validate response format",
                  "    pm.expect(jsonData.data).to.match(/Updated status for \\d+ tasks to .+/);",
                  "});",
                  "",
                  "pm.test(\"Bulk operation maintains data consistency\", function () {",
                  "    // This test validates that bulk operations don't corrupt data",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"taskIds\": {{bulkTaskIds}},\n  \"status\": \"IN_PROGRESS\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tasks/bulk/status",
              "host": ["{{baseUrl}}"],
              "path": ["tasks", "bulk", "status"]
            }
          }
        },
        {
          "name": "Task Duplication Business Rules",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Duplicated task follows business rules\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    ",
                  "    // Rule 1: New task has different ID",
                  "    pm.expect(jsonData.data.id).to.not.eql(parseInt(pm.collectionVariables.get('lifecycleTaskId')));",
                  "    ",
                  "    // Rule 2: Title contains 'Copy' suffix",
                  "    pm.expect(jsonData.data.title).to.include('Copy');",
                  "    ",
                  "    // Rule 3: Status is reset to TODO",
                  "    pm.expect(jsonData.data.status).to.eql('TODO');",
                  "    ",
                  "    // Rule 4: completedAt is null (new task)",
                  "    pm.expect(jsonData.data.completedAt).to.be.null;",
                  "    ",
                  "    // Rule 5: Priority and description are preserved",
                  "    pm.expect(jsonData.data.priority).to.eql('HIGH');",
                  "    pm.expect(jsonData.data.description).to.eql('Testing complete task lifecycle');",
                  "    ",
                  "    // Rule 6: Due date is preserved",
                  "    pm.expect(jsonData.data.dueDate).to.eql('2025-12-31');",
                  "    ",
                  "    // Rule 7: Notes are preserved",
                  "    pm.expect(jsonData.data.notes).to.eql('Started working on task');",
                  "});",
                  "",
                  "pm.test(\"Duplicated task has fresh timestamps\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const now = new Date();",
                  "    const createdAt = new Date(jsonData.data.createdAt);",
                  "    const updatedAt = new Date(jsonData.data.updatedAt);",
                  "    ",
                  "    // Timestamps should be recent",
                  "    pm.expect(now - createdAt).to.be.below(600000); // 10 minutes",
                  "    pm.expect(now - updatedAt).to.be.below(600000);",
                  "    ",
                  "    // Timestamps should be equal for new task",
                  "    const timeDiff = Math.abs(createdAt.getTime() - updatedAt.getTime());",
                  "    pm.expect(timeDiff).to.be.below(1000); // 1 second tolerance",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "url": {
              "raw": "{{baseUrl}}/tasks/{{lifecycleTaskId}}/duplicate",
              "host": ["{{baseUrl}}"],
              "path": ["tasks", "{{lifecycleTaskId}}", "duplicate"]
            }
          }
        },
        {
          "name": "Search and Filter Business Logic",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Search results match criteria\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('content');",
                  "    pm.expect(jsonData.data.content).to.be.an('array');",
                  "    ",
                  "    // Validate search results contain the search term",
                  "    if (jsonData.data.content.length > 0) {",
                  "        const searchTerm = 'lifecycle';",
                  "        const hasMatchingTask = jsonData.data.content.some(task => ",
                  "            task.title.toLowerCase().includes(searchTerm.toLowerCase()) ||",
                  "            task.description.toLowerCase().includes(searchTerm.toLowerCase())",
                  "        );",
                  "        pm.expect(hasMatchingTask).to.be.true;",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Pagination maintains data integrity\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    // Validate pagination structure",
                  "    pm.expect(jsonData.data).to.have.property('totalElements');",
                  "    pm.expect(jsonData.data).to.have.property('totalPages');",
                  "    pm.expect(jsonData.data).to.have.property('size');",
                  "    pm.expect(jsonData.data).to.have.property('number');",
                  "    ",
                  "    // Validate pagination math",
                  "    const expectedTotalPages = Math.ceil(jsonData.data.totalElements / jsonData.data.size);",
                  "    pm.expect(jsonData.data.totalPages).to.eql(expectedTotalPages);",
                  "    ",
                  "    // Validate content size matches numberOfElements",
                  "    pm.expect(jsonData.data.content.length).to.eql(jsonData.data.numberOfElements);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"searchTerm\": \"lifecycle\",\n  \"status\": \"TODO\",\n  \"priority\": \"HIGH\",\n  \"page\": 0,\n  \"size\": 10,\n  \"sortBy\": \"createdAt\",\n  \"sortDirection\": \"DESC\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tasks/search",
              "host": ["{{baseUrl}}"],
              "path": ["tasks", "search"]
            }
          }
        },
        {
          "name": "Analytics Business Logic Validation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Analytics data is mathematically consistent\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    ",
                  "    // Validate all counts are non-negative",
                  "    pm.expect(jsonData.data.totalTasks).to.be.at.least(0);",
                  "    pm.expect(jsonData.data.completedTasks).to.be.at.least(0);",
                  "    ",
                  "    // Validate completed tasks don't exceed total",
                  "    pm.expect(jsonData.data.completedTasks).to.be.at.most(jsonData.data.totalTasks);",
                  "    ",
                  "    // Validate status counts sum to total tasks",
                  "    const statusSum = jsonData.data.statusCounts.TODO + jsonData.data.statusCounts.IN_PROGRESS + jsonData.data.statusCounts.COMPLETED;",
                  "    pm.expect(statusSum).to.eql(jsonData.data.totalTasks);",
                  "    ",
                  "    // Validate priority counts sum to total tasks",
                  "    const prioritySum = jsonData.data.priorityCounts.HIGH + jsonData.data.priorityCounts.MEDIUM + jsonData.data.priorityCounts.LOW;",
                  "    pm.expect(prioritySum).to.eql(jsonData.data.totalTasks);",
                  "    ",
                  "    // Validate completion rate calculation",
                  "    if (jsonData.data.totalTasks > 0) {",
                  "        const expectedCompletionRate = (jsonData.data.completedTasks / jsonData.data.totalTasks) * 100;",
                  "        pm.expect(jsonData.data.completionRate).to.be.closeTo(expectedCompletionRate, 0.01);",
                  "    } else {",
                  "        pm.expect(jsonData.data.completionRate).to.eql(0);",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Analytics reflect actual task states\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    // Validate status counts are consistent with business rules",
                  "    pm.expect(jsonData.data.statusCounts.TODO).to.be.at.least(0);",
                  "    pm.expect(jsonData.data.statusCounts.IN_PROGRESS).to.be.at.least(0);",
                  "    pm.expect(jsonData.data.statusCounts.COMPLETED).to.be.at.least(0);",
                  "    ",
                  "    // Validate priority distribution",
                  "    pm.expect(jsonData.data.priorityCounts.HIGH).to.be.at.least(0);",
                  "    pm.expect(jsonData.data.priorityCounts.MEDIUM).to.be.at.least(0);",
                  "    pm.expect(jsonData.data.priorityCounts.LOW).to.be.at.least(0);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/analytics/dashboard",
              "host": ["{{baseUrl}}"],
              "path": ["analytics", "dashboard"]
            }
          }
        },
        {
          "name": "Data Export Integrity Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"CSV export contains valid data\", function () {",
                  "    const csvContent = pm.response.text();",
                  "    pm.expect(csvContent).to.not.be.empty;",
                  "    ",
                  "    // Validate CSV structure",
                  "    const lines = csvContent.split('\\n');",
                  "    pm.expect(lines.length).to.be.above(1); // Header + data",
                  "    ",
                  "    // Validate header row",
                  "    const header = lines[0];",
                  "    pm.expect(header).to.include('ID');",
                  "    pm.expect(header).to.include('Title');",
                  "    pm.expect(header).to.include('Status');",
                  "    pm.expect(header).to.include('Priority');",
                  "});",
                  "",
                  "pm.test(\"CSV export maintains data consistency\", function () {",
                  "    const csvContent = pm.response.text();",
                  "    const lines = csvContent.split('\\n');",
                  "    ",
                  "    // Validate each data row has correct number of columns",
                  "    if (lines.length > 1) {",
                  "        const headerColumns = lines[0].split(',').length;",
                  "        for (let i = 1; i < lines.length; i++) {",
                  "            if (lines[i].trim()) {",
                  "                const dataColumns = lines[i].split(',').length;",
                  "                pm.expect(dataColumns).to.eql(headerColumns);",
                  "            }",
                  "        }",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/export/tasks?format=csv",
              "host": ["{{baseUrl}}"],
              "path": ["export", "tasks"],
              "query": [
                {
                  "key": "format",
                  "value": "csv"
                }
              ]
            }
          }
        },
        {
          "name": "Error Handling and Edge Cases",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Invalid task ID returns appropriate error\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([404, 400]);",
                  "});",
                  "",
                  "pm.test(\"Error response has proper structure\", function () {",
                  "    if (pm.response.code >= 400) {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('timestamp');",
                  "        pm.expect(jsonData).to.have.property('status');",
                  "        pm.expect(jsonData).to.have.property('error');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/tasks/99999",
              "host": ["{{baseUrl}}"],
              "path": ["tasks", "99999"]
            }
          }
        },
        {
          "name": "Performance and Load Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response time is acceptable for bulk operations\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000); // 5 seconds max",
                  "});",
                  "",
                  "pm.test(\"Memory usage is reasonable\", function () {",
                  "    // This test validates that the operation doesn't consume excessive memory",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000); // 10 seconds max",
                  "});",
                  "",
                  "pm.test(\"Bulk operation maintains data integrity under load\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "    ",
                  "    // Validate all tasks were created successfully",
                  "    jsonData.data.forEach(task => {",
                  "        pm.expect(task).to.have.property('id');",
                  "        pm.expect(task.id).to.be.a('number');",
                  "        pm.expect(task.id).to.be.above(0);",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n  {\n    \"title\": \"Load Test Task 1\",\n    \"description\": \"Testing system under load\",\n    \"priority\": \"HIGH\",\n    \"status\": \"TODO\"\n  },\n  {\n    \"title\": \"Load Test Task 2\",\n    \"description\": \"Testing system under load\",\n    \"priority\": \"MEDIUM\",\n    \"status\": \"TODO\"\n  },\n  {\n    \"title\": \"Load Test Task 3\",\n    \"description\": \"Testing system under load\",\n    \"priority\": \"LOW\",\n    \"status\": \"TODO\"\n  },\n  {\n    \"title\": \"Load Test Task 4\",\n    \"description\": \"Testing system under load\",\n    \"priority\": \"HIGH\",\n    \"status\": \"TODO\"\n  },\n  {\n    \"title\": \"Load Test Task 5\",\n    \"description\": \"Testing system under load\",\n    \"priority\": \"MEDIUM\",\n    \"status\": \"TODO\"\n  }\n]"
            },
            "url": {
              "raw": "{{baseUrl}}/tasks/bulk/create",
              "host": ["{{baseUrl}}"],
              "path": ["tasks", "bulk", "create"]
            }
          }
        }
      ]
    }
  ]
}
